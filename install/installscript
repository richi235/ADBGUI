#!/bin/bash
### ADBGUI Install script v2 ###

# check if sudo is installed
if hash sudo 2>/dev/null; then
    # sudo is installed proceed as normal
    sudocommand="sudo"
else     # check if we are root
    if (( $EUID == 0 )); then
        sudocommand= ''  # we are, so we will simply install everything as root
    else
        echo "sudo is not installed and you are not root"
        echo "please install sudo or execute as root"
        exit
     fi   
fi

# Install dependencies via apt-get
echo "Installing some dependencies via \"(sudo) apt-get install\" : "
$sudocommand apt-get update
$sudocommand apt-get --force-yes -y install libwww-perl libgd-graph3d-perl libunix-syslog-perl libpoe-perl mysql-server libpoe-component-client-http-perl libdate-calc-perl libjson-perl libclone-perl libemail-mime-createhtml-perl libemail-send-perl

cd install 2>/dev/null

export apachefiles="gui.pl DBDesign.pm gui.cfg url.css"
export apachelinks="$apachefiles ADBGUI bilder"
export defaultfiles="dbm.pl dbm.cfg DBDesign.pm"

# defaultfiles (dbm.cfg etc...) 
for i in "$defaultfiles"; do
   cp $i ..;
done;
chmod +x dbm.pl;

# Apache und gui.pl
touch ../gui.cfg;
if [[ $1 == "noap" || $2 == "noap" ]]; then
   /bin/true;
else
   cp $apachefiles ..;
   chmod +x ../gui.pl;
fi

echo "\$DB->{name} = '$PROJECTNAME';" >>../DBDesign.pm



# Qooxdoo
if [[ $1 == "qx" || $2 == "qx" ]]; then
   $sudocommand apt-get --force-yes -y install unzip python;
   rm -R qooxdoo-*-sdk ../qooxdoo-*-sdk 2>/dev/null;
   unzip qooxdoo-*-sdk.zip;
   mv qooxdoo-*-sdk ..;
fi

cd ..

# MySQL
echo -e "\n"
echo -e "\e[1m#### Creating Database #####\e[0m"
echo -e "Installscript needs Password of Database User \"root\" to create Database for your Project:\n"
perl ADBGUI/createMysql.pl createdb | mysql  --user=root --password
echo -e "\n"

# QX
if [[ $1 == "qx" || $2 == "qx" ]]; then
   rm -R myproject 2>/dev/null;
   qooxdoo-*-sdk/tool/bin/create-application.py -n myproject;
   bash ADBGUI/Qooxdoo/install.sh;
   perl install/setupQXConfig.pl;
   cd myproject;
   for i in build source; do
      ./generate.py $i;
      cd $i;
      rm bilder 2>/dev/null;
      ln -s ../../bilder .;
      rm qooxdoo-*-sdk 2>/dev/null;
      ln -s ../../qooxdoo-*-sdk .;
      rm source 2>/dev/null;
      ln -s source .;
      cd ..;
   done;
   cd source/resource;
   rm qx 2>/dev/null;
   ln -s ../../build/resource/qx/ .;
   cd ../..;
   cd ..;
fi;

# Apache2 Webserver
if [[ $1 == "noap" || $2 == "noap" ]]; then
   /bin/true;
else
   $sudocommand apt-get --force-yes -y install apache2
   for i in $apachelinks; do
      $sudocommand rm /usr/lib/cgi-bin/$i 2>/dev/null;
      $sudocommand ln -s `pwd`/$i /usr/lib/cgi-bin/$i;
   done;
fi;

# Pictures Directory
if [[ -h /var/www/bilder ]]; then
   $sudocommand rm /var/www/bilder;
fi
$sudocommand ln -s `pwd`/bilder/ /var/www/bilder

# create the skeleton slice files:
perl install/skeleton.pl $PROJECTNAME

# call the reconfig script (needed for installation)
if [[ $1 == "noap" || $2 == "noap" ]]; then
    bash install/reconfig.debian.sh noap
else
    bash install/reconfig.debian.sh noap
fi

